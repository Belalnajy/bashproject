#!/usr/bin/bash

isInt() {
    if [[ $1 =~ ^-?[0-9]+$ ]]; then #-?: Matches an optional minus sign (-) for negative integers.
        return 0 
    else
        zenity --error --text="'$1' is not a valid integer."
        return 1 
    fi
}

isChar() {
    if [[ $1 =~ ^[a-zA-Z]+$ ]]; then
        return 0 
    else
        zenity --error --text="'$1' is not a valid character string."
        return 1  
    fi
}

create_table() {
        Tb_name=$(zenity --entry --text="Please Enter Table Name")
                            if [[ -z $Tb_name || $Tb_name =~ ^[" "]+$ ]]
                            then
                                zenity --error --text="Table Name Can't be Empty"
                                return
                            fi
                            if [[ -e $Tb_name ]]
                            then
                                zenity --error --text="Table already Exists"
                            else
                                while true
                                do
                                col_num=$(zenity --entry --text="Please Enter Columns Numbers")
                                isInt $col_num
                                if [[ $? -eq 0 ]]
                                then
                                    break
                                else
                                    continue
                                fi
                                done
                                flag=0
                                for((i=0;i<$col_num;i++))
                                do
                                line=""
                                while true
                                do
                                colname=$(zenity --entry --text="Please enter column $((i+1)) Name")
                                if [[ $(cat .$Tb_name-metadata 2> /dev/null | cut -d: -f1 | grep -w $colname 2> /dev/null) ]]
                                then
                                    zenity --error --text="Column $colname already exists"
                                    continue
                                fi
                                if [[ -z $colname || $colname =~ ^[" "]+$ ]]
                                then
                                    zenity --warning --text="Column Name Can't be Empty"
                                    continue
                                fi
                                isChar $colname
                                if [[ $? -eq 0 ]]
                                then
                                    zenity --notification --text="Column $colname Created"
                                    line+=$colname:
                                    break
                                else
                                    continue
                                fi
                                done
                                while true
                                do
                                col_data=$(zenity --entry --text="Please Enter Data Type (int-char)")
                                if [[ -z $col_data ]]
                                then
                                    zenity --warning --text="Column Datatype Can't be Empty"
                                    continue
                                fi
                                if ! [[ ${col_data^^} =~ ^(CHAR|INT)$ ]]
                                then
                                    zenity --warning --text="Allowed Data types (int - char)"
                                    continue 
                                    else
                                        line+=$col_data:
                                        break
                                    fi
                                    done
                                    if [[ $flag -eq 0 ]]
                            then
                                if $(zenity --question --text="Do you want $col_name to be primary key ?")
                                then
                                line+=pk
                                flag=1
                                fi
                    fi
                    echo $line >> .$Tb_name-metadata
                                done
                                touch $Tb_name
                                zenity --notification --text="Table $Tb_name created"
                            fi
}
list_tables() {
    tables=$(ls -p | grep -v / | grep -v '^\.')
    #echo $tables
    metadata_files=$(ls -a | grep '^\.' | grep -v '^\.\.$' | grep -v '^\.$')
    #echo $metadata_files
    if [[ -z "$tables" && -z "$metadata_files" ]]
     then
        zenity --error --text="No tables exist in this database!"
    else
        zenity --list --title="Tables" --column="Tables" $tables
    fi
}
drop_table() {
        Tb_name=$(zenity --entry --text="Please Enter Table Name")
                            if [[ -z $Tb_name || $Tb_name =~ ^[" "]+$ ]]
                            then
                                zenity --error --text="Table Name Can't be Empty"
                            else
                                if [[ -e $Tb_name ]]
                                then
                                    rm $Tb_name
                                    rm .$Tb_name-metadata
                                    zenity --notification --text="Table $Tb_name Dropped"
                                else
                                    zenity --error --text="Table $Tb_name doesn't exist"
                                fi
                            fi
}
insert_into_table() {
    Tb_name=$(zenity --entry --text="Please Enter Table Name")
    if [[ -z $Tb_name || $Tb_name =~ ^[" "]+$ ]]; then
        zenity --error --text="Table Name Can't Be Empty"
        return
    fi

    if [[ ! -e $Tb_name ]]; then
        zenity --error --text="Table '$Tb_name' Does Not Exist"
        return
    fi

    metadata_file=".$Tb_name-metadata"
    if [[ ! -e $metadata_file ]]; then
        zenity --error --text="Metadata for Table '$Tb_name' Does Not Exist"
        return
    fi

    columns=($(cut -d: -f1 $metadata_file))
    data_types=($(cut -d: -f2 $metadata_file))
    primary_key=$(awk -F: '/pk/{print $1}' $metadata_file)
    row_data=()

    # Find the index of the primary key column
    primary_key_index=-1
    for i in "${!columns[@]}"; do
        if [[ ${columns[$i]} == $primary_key ]]; then
            primary_key_index=$i
            break
        fi
    done

    if [[ $primary_key_index -eq -1 ]]; then
        zenity --error --text="Primary key column not found in metadata"
        return
    fi

    for ((i = 0; i < ${#columns[@]}; i++)); do
        column_name=${columns[$i]}
        data_type=${data_types[$i]}

        while true; do
            data=$(zenity --entry --text="Enter value for '$column_name' ($data_type):")
            if [[ -z $data ]]; then
                zenity --error --text="Value for '$column_name' Cannot Be Empty"
                continue
            fi

            if [[ $data_type == "int" ]]
             then
                isInt $data
                if [[ $? -ne 0 ]]
                    then
                    continue
                fi
            elif [[ $data_type == "char" ]]
             then
                isChar $data
                if [[ $? -ne 0 ]]
                 then
                    continue
                fi
            fi

            if [[ $column_name == $primary_key ]]; then
                if awk -F: -v pk_index=$((primary_key_index + 1)) -v pk_value="$data" \
                   '$pk_index == pk_value' "$Tb_name" | grep -q .; then
                    zenity --error --text="Primary key '$data' already exists in the table."
                    continue
                fi
            fi

            row_data+=("$data")
            break
        done
    done

    # Join the row data with a colon (:) separator and append it to the table file
    row=$(IFS=:; echo "${row_data[*]}")
    echo "$row" >> "$Tb_name"

    # Notify the user that the data was inserted successfully
    zenity --notification --text="Data inserted into table '$Tb_name' successfully!"
}

select_from_table() {

    Tb_name=$(zenity --entry --text="Please Enter Table Name")
    if [[ -z $Tb_name || $Tb_name =~ ^[" "]+$ ]]; then
        zenity --error --text="Table Name Can't Be Empty"
        return
    fi

    if [[ ! -e $Tb_name ]]; then
        zenity --error --text="Table '$Tb_name' Does Not Exist"
        return
    fi

    metadata_file=".$Tb_name-metadata"
    if [[ ! -e $metadata_file ]]; then
        zenity --error --text="Metadata for Table '$Tb_name' Does Not Exist"
        return
    fi

    columns=($(cut -d: -f1 $metadata_file))
    data_types=($(cut -d: -f2 $metadata_file))

    # Display the column names as a list for the user to choose from
    selected_columns=$(zenity --list --title="Select Columns" --column="Columns" --multiple "${columns[@]}")
    if [[ -z $selected_columns ]]; then
        zenity --error --text="No columns selected"
        return
    fi

    # Convert the selected columns into an array
    IFS='|' read -r -a selected_columns_array <<< "$selected_columns"

    # Get the indices of the selected columns
    selected_indices=()
    for column in "${selected_columns_array[@]}"; do
        for i in "${!columns[@]}"; do
            if [[ ${columns[$i]} == $column ]]; then
                selected_indices+=("$i")
                break
            fi
        done
    done

    # column name
    header=""
    for column in "${selected_columns_array[@]}"; do
        header+="$column\t"
    done
    header=${header%$'\t'}  

    # Read the table data and format it into rows
    output="$header\n"
    while IFS= read -r line; do
        IFS=':' read -r -a row <<< "$line"
        row_data=""
        for index in "${selected_indices[@]}"; do
            row_data+="${row[$index]}\t\t"
        done
        row_data=${row_data%$'\t'}  
        output+="$row_data\n"
    done < "$Tb_name"

    if [[ -z $output ]]; then
        zenity --error --text="No data found in the table"
    else
        zenity --info --title="Data from Table '$Tb_name'" --text="$(echo -e "$output")" --width=400 --height=200
    fi

}

delete_from_table() {

    Tb_name=$(zenity --entry --text="Please Enter Table Name")
    if [[ -z $Tb_name || $Tb_name =~ ^[" "]+$ ]]; then
        zenity --error --text="Table Name Can't Be Empty"
        return
    fi

    if [[ ! -e $Tb_name ]]; then
        zenity --error --text="Table '$Tb_name' Does Not Exist"
        return
    fi

    metadata_file=".$Tb_name-metadata"
    if [[ ! -e $metadata_file ]]; then
        zenity --error --text="Metadata for Table '$Tb_name' Does Not Exist"
        return
    fi

    columns=($(cut -d: -f1 $metadata_file))
    data_types=($(cut -d: -f2 $metadata_file))
    primary_key=$(awk -F: '/pk/{print $1}' $metadata_file)
    primary_key_index=$(awk -F: "/^$primary_key:/"'{print NR}' $metadata_file)

    # Display the primary key column for the user to enter the value to delete
    while true; do
        primary_key_value=$(zenity --entry --text="Enter the value of the primary key ($primary_key):")
        if [[ -z $primary_key_value ]]; then
            zenity --error --text="Primary key value cannot be empty"
            continue
        fi

       if awk -F: -v pk_index="$primary_key_index" -v pk_value="$primary_key_value" \
        'BEGIN {found=0} 
        {if ($pk_index == pk_value) {found=1; exit 0}} 
        END {if (!found) exit 1}' "$Tb_name"; then

        echo "Found"
    
        awk -F: -v pk_index="$primary_key_index" -v pk_value="$primary_key_value" \
        '
         $pk_index != pk_value {print $0} 
        ' "$Tb_name" > temp && mv temp "$Tb_name"

        zenity --notification --text="Row with primary key '$primary_key_value' deleted successfully"
        break
        else
        zenity --error --text="Primary key value '$primary_key_value' not found in the table"
        fi
    done
}

update_table() {
    Tb_name=$(zenity --entry --text="Please Enter Table Name")
    if [[ -z $Tb_name || $Tb_name =~ ^[" "]+$ ]]; then
        zenity --error --text="Table Name Can't Be Empty"
        return
    fi

    if [[ ! -e $Tb_name ]]; then
        zenity --error --text="Table '$Tb_name' Does Not Exist"
        return
    fi

    metadata_file=".$Tb_name-metadata"
    if [[ ! -e $metadata_file ]]; then
        zenity --error --text="Metadata for Table '$Tb_name' Does Not Exist"
        return
    fi

    columns=($(cut -d: -f1 $metadata_file))
    data_types=($(cut -d: -f2 $metadata_file))
    primary_key=$(awk -F: '/pk/{print $1}' $metadata_file)

    # Find the index of the primary key column
    primary_key_index=-1
    for i in "${!columns[@]}"; do
        if [[ ${columns[$i]} == $primary_key ]]; then
            primary_key_index=$i
            break
        fi
    done

    if [[ $primary_key_index -eq -1 ]]; then
        zenity --error --text="Primary key column not found in metadata"
        return
    fi

    # Display the primary key column for the user to enter the value to update
    while true; do
        primary_key_value=$(zenity --entry --text="Enter the value of the primary key ($primary_key):")
        if [[ -z $primary_key_value ]]; then
            zenity --error --text="Primary key value cannot be empty"
            continue
        fi

        # Check if the primary key value exists in the table
        if awk -F: -v pk_index=$((primary_key_index + 1)) -v pk_value="$primary_key_value" \
           'BEGIN {found=0} 
            {if ($pk_index == pk_value) {found=1; exit 0}} 
            END {if (!found) exit 1}' "$Tb_name"; then

            # Get the row data for the primary key value
            row_data=$(awk -F: -v pk_index=$((primary_key_index + 1)) -v pk_value="$primary_key_value" \
                       '$pk_index == pk_value' "$Tb_name")
            IFS=':' read -r -a row <<< "$row_data"

            # Display the row data for the user to update
            updated_row=()
            for ((i = 0; i < ${#columns[@]}; i++)); do
                column_name=${columns[$i]}
                data_type=${data_types[$i]}
                old_value=${row[$i]}

                while true; do
                    new_value=$(zenity --entry --text="Enter new value for '$column_name' ($data_type):" --entry-text="$old_value")
                    if [[ -z $new_value ]]; then
                        zenity --error --text="Value for '$column_name' cannot be empty"
                        continue
                    fi

                    if [[ $data_type == "int" ]]; then
                        isInt "$new_value"
                        if [[ $? -ne 0 ]]; then
                            continue
                        fi
                    elif [[ $data_type == "char" ]]; then
                        isChar "$new_value"
                        if [[ $? -ne 0 ]]; then
                            continue
                        fi
                    fi

                    if [[ $column_name == $primary_key ]]; then
                        if awk -F: -v pk_index=$((primary_key_index + 1)) -v pk_value="$new_value" \
                           'BEGIN {found=0} 
                            {if ($pk_index == pk_value) {found=1; exit 0}} 
                            END {if (!found) exit 1}' "$Tb_name"; then
                            zenity --error --text="Primary key '$new_value' already exists in the table."
                            continue
                        fi
                    fi

                    updated_row+=("$new_value")
                    break
                done
            done

            # Join the updated row data with a colon (:) separator
            updated_row_data=$(IFS=:; echo "${updated_row[*]}")

            # Replace the old row data with the updated row data in the table
            awk -F: -v pk_index=$((primary_key_index + 1)) -v pk_value="$primary_key_value" -v new_row="$updated_row_data" \
                'BEGIN {OFS=":"} 
                 {if ($pk_index == pk_value) $0=new_row; print}' "$Tb_name" > temp && mv temp "$Tb_name"

            zenity --notification --text="Row with primary key '$primary_key_value' updated successfully"
            break
        else
            zenity --error --text="Primary key value '$primary_key_value' not found in the table"
        fi
    done
}